


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************
    2 00000000         ;* htw saar - Fakultaet fuer Ingenieurwissenschaften    
                       *
    3 00000000         ;* Labor fuer Eingebettete Systeme         *
    4 00000000         ;* Mikroprozessortechnik           *
    5 00000000         ;*******************************************************
                       *************
    6 00000000         ;* Assembler_Startup.S:            *
    7 00000000         ;* Programmrumpf fuer Assembler-Programme mit dem Keil  
                         *
    8 00000000         ;* Entwicklungsprogramm uVision fuer ARM-Mikrocontroller
                          *
    9 00000000         ;*******************************************************
                       *************
   10 00000000         ;* Aufgabe-Nr.:          * 1                      *
   11 00000000         ;*                 *             *
   12 00000000         ;*******************************************************
                       *************
   13 00000000         ;* Gruppen-Nr.:    * 3. Gruppe Freitag      *
   14 00000000         ;*                 *          *
   15 00000000         ;*******************************************************
                       *************
   16 00000000         ;* Name / Matrikel-Nr.:  * Christian Petry / 3847497    
                       *
   17 00000000         ;*       * Xudong Zhang /      *
   18 00000000         ;*       *          *
   19 00000000         ;*******************************************************
                       *************
   20 00000000         ;* Abgabedatum:          * 20.12.2024                *
   21 00000000         ;*       *          *
   22 00000000         ;*******************************************************
                       *************
   23 00000000         
   24 00000000         ;*******************************************************
                       *************
   25 00000000         ;* Daten-Bereich bzw. Daten-Speicher                 *
   26 00000000         ;*******************************************************
                       *************
   27 00000000                 AREA             Daten, DATA, READWRITE
   28 00000000         Datenanfang
   29 00000000 00000100 
                       STR_1   EQU              Datenanfang + 0x100 ; Adresse f
                                                            ür ersten String S
                                                            TR_1
   30 00000000 00000200 
                       STR_2   EQU              Datenanfang + 0x200 ; Adresse f
                                                            ür zweiten String 
                                                            STR_2, Ausgabe
   31 00000000 00000300 
                       Stack   EQU              Datenanfang + 0x300 ; Stack
   32 00000000 00000400 
                       TopStack
                               EQU              Stack + 0x100 ; Obergrenze des 
                                                            Stacks             
                                                                               
                                                             
   33 00000000         
   34 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************
   35 00000000         ;* Programm-Bereich bzw. Programm-Speicher       *
   36 00000000         ;*******************************************************
                       *************
   37 00000000                 AREA             Programm, CODE, READONLY
   38 00000000                 ARM
   39 00000000 E321F010 
                       Reset_Handler
                               MSR              CPSR_c, #0x10 ; User Mode aktiv
                                                            ieren
   40 00000004         
   41 00000004         ;*******************************************************
                       *************
   42 00000004         ;* Hier das eigene (Haupt-)Programm einfuegen        *
   43 00000004         ;*******************************************************
                       *************
   44 00000004         
   45 00000004         main
   46 00000004 E59FD0FC        LDR              SP, =TopStack ; Stack initialis
                                                            ieren  
   47 00000008 E59F00FC        LDR              R0, =STR_1  ; Adresse des Strin
                                                            gs STR_1 in R0 lade
                                                            n        
   48 0000000C EB000003        BL               AtouI       ; Branch with Link 
                                                            zu AtouI
   49 00000010 EB000014        BL               Berechnung  ; Branch with Link 
                                                            zu Berechnung  
   50 00000014 E59F10F4        LDR              R1, =STR_2  ; Adresse des Strin
                                                            gs STR_2 in R1 lade
                                                            n           
   51 00000018 EB00001F        BL               uItoA       ; Branch with Link 
                                                            zu uItoA
   52 0000001C         
   53 0000001C         ;*******************************************************
                       *************
   54 0000001C         ;* Ende des eigenen (Haupt-)Programms                   
                                   *
   55 0000001C         ;*******************************************************
                       *************
   56 0000001C EAFFFFFE 
                       endlos  B                endlos      ; Endlosschleife   
                                                                       
   57 00000020         
   58 00000020         ;*******************************************************
                       *************
   59 00000020         ;* ab hier Unterprogramme                               
                                   *
   60 00000020         ;*******************************************************
                       *************
   61 00000020         
   62 00000020         ;*******************************************************
                       *************
   63 00000020         ;                                                       
                                   *
   64 00000020         ;           AtouI - Konvertiert ASCII-Zeichen in Integer
                                   *
   65 00000020         ;                                                       
                                   *
   66 00000020         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *************
   67 00000020         
   68 00000020         AtouI
   69 00000020 E92D401E        STMFD            SP!, {R1-R4, LR} ; Speichern vo
                                                            n Registern R1-R4 u
                                                            nd und Rücksprunga
                                                            dresse auf Stack
   70 00000024 E3A01000        MOV              R1, #0      ; R1 = 0  
   71 00000028 E3A0200A        MOV              R2, #10     ; R2 = 10          
                                                              
   72 0000002C         
   73 0000002C         convert_loop_AtouI
   74 0000002C E4D03001        LDRB             R3, [R0], #1 ; Laden von aktuel
                                                            lem Zeichen in R3 u
                                                            nd Inkrementierung 
                                                            von R0
   75 00000030 0A000006        BEQ              done_AtouI  ; Wenn R3 = 0, dann
                                                             gehe zu done_AtouI
                                                                    
   76 00000034         
   77 00000034 E2433030        SUB              R3, R3, #'0' ; R3 = R3 - '0' 
   78 00000038 E3530009        CMP              R3, #9      ; Vergleiche R3 mit
                                                             9
   79 0000003C 8A000006        BHI              error
   80 00000040         
   81 00000040 E1A04001        MOV              R4, R1
   82 00000044 E0010294        MUL              R1, R4, R2
   83 00000048 E0811003        ADD              R1, R1, R3
   84 0000004C         
   85 0000004C EAFFFFF6        B                convert_loop_AtouI
   86 00000050         
   87 00000050         done_AtouI
   88 00000050 E1A00001        MOV              R0, R1
   89 00000054 E8BD401E        LDMFD            SP!, {R1-R4, LR}
   90 00000058 E12FFF1E        BX               LR
   91 0000005C         
   92 0000005C         error
   93 0000005C E3A00000        MOV              R0, #0
   94 00000060 E8BD401E        LDMFD            SP!, {R1-R4, LR}
   95 00000064 E12FFF1E        BX               LR
   96 00000068         
   97 00000068         
   98 00000068         ;*******************************************************
                       *************
   99 00000068         ;                                                       
                                   *
  100 00000068         ;                   Berechnung -> Y = ((2/5) * X)²     
                                    *
  101 00000068         ;                                                       
                                   *
  102 00000068         ;*******************************************************
                       *************
  103 00000068         
  104 00000068         Berechnung
  105 00000068 E92D401E        STMFD            SP!, {R1-R4, LR}
  106 0000006C         
  107 0000006C E1A00800        LSL              R0, R0, #16
  108 00000070 E1A00840        ASR              R0, R0, #16
  109 00000074         



ARM Macro Assembler    Page 4 


  110 00000074 E3500000        CMP              R0, #0
  111 00000078 42600000        RSBMI            R0, R0, #0
  112 0000007C         
  113 0000007C E1A01000        MOV              R1, R0
  114 00000080 E1A02081        MOV              R2, R1, LSL #1
  115 00000084         
  116 00000084 E59F1088        LDR              R1, =0xCCCCCCCD
  117 00000088 E0843192        UMULL            R3, R4, R2, R1
  118 0000008C E1A02104        MOV              R2, R4, LSL #2
  119 00000090         
  120 00000090 E0000292        MUL              R0, R2, R2
  121 00000094 E8BD401E        LDMFD            SP!, {R1-R4, LR}
  122 00000098 E12FFF1E        BX               LR
  123 0000009C         
  124 0000009C         
  125 0000009C         ;*******************************************************
                       *************
  126 0000009C         ;                                                       
                                   *
  127 0000009C         ;           uItoA - Konvertiert Integer in ASCII-Zeichen
                                   *
  128 0000009C         ;                                                       
                                   *
  129 0000009C         ;*******************************************************
                       *************
  130 0000009C         
  131 0000009C         uItoA
  132 0000009C E92D40FE        STMFD            SP!, {R1-R7, LR}
  133 000000A0 E5903000        LDR              R3, [R0]
  134 000000A4 E1A04003        MOV              R4, R3
  135 000000A8 E1A05001        MOV              R5, R1
  136 000000AC E1A07005        MOV              R7, R5
  137 000000B0         
  138 000000B0         convert_loop_uItoA
  139 000000B0 E59F605C        LDR              R6, =0xCCCCCCCD
  140 000000B4 E0821694        UMULL            R1, R2, R4, R6
  141 000000B8 E1A021A2        MOV              R2, R2, LSR #3
  142 000000BC E3A0300A        MOV              R3, #10
  143 000000C0 E0010392        MUL              R1, R2, R3
  144 000000C4 E0441001        SUB              R1, R4, R1
  145 000000C8 E2811030        ADD              R1, R1, #'0'
  146 000000CC E4C71001        STRB             R1, [R7], #1
  147 000000D0 E1A04002        MOV              R4, R2
  148 000000D4 E3540000        CMP              R4, #0
  149 000000D8 1AFFFFF4        BNE              convert_loop_uItoA
  150 000000DC         
  151 000000DC E3A03000        MOV              R3, #0
  152 000000E0 E5C73000        STRB             R3, [R7]
  153 000000E4         
  154 000000E4         reverse_loop
  155 000000E4 E1550007        CMP              R5, R7
  156 000000E8 2A000004        BHS              done_uItoA
  157 000000EC E5D53000        LDRB             R3, [R5]
  158 000000F0 E5D71000        LDRB             R1, [R7]
  159 000000F4 E4C51001        STRB             R1, [R5], #1
  160 000000F8 E4473001        STRB             R3, [R7], #-1
  161 000000FC EAFFFFF8        B                reverse_loop
  162 00000100         
  163 00000100         done_uItoA



ARM Macro Assembler    Page 5 


  164 00000100 E8BD40FE        LDMFD            SP!, {R1-R7, LR}
  165 00000104 E12FFF1E        BX               LR
  166 00000108         
  167 00000108         ;*******************************************************
                       *************
  168 00000108         ;* Konstanten im CODE-Bereich                           
                                   *
  169 00000108         ;*******************************************************
                       *************
  170 00000108         ;STR_1_Input     DCB         "65535", 0x00
  171 00000108         
  172 00000108         ;*******************************************************
                       *************
  173 00000108         ;* Ende der Programm-Quelle                             
                                   *
  174 00000108         ;*******************************************************
                       *************
  175 00000108                 ALIGN
  176 00000108                 END
              00000000 
              00000000 
              00000000 
              CCCCCCCD 
Command Line: --debug --xref --depend=.\assembler_startup.d -o.\assembler_start
up.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Phili
ps --predefine="__EVAL SETA 1" --list=.\assembler_startup.lst Assembler_Startup
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Daten 00000000

Symbol: Daten
   Definitions
      At line 27 in file Assembler_Startup.s
   Uses
      None
Comment: Daten unused
Datenanfang 00000000

Symbol: Datenanfang
   Definitions
      At line 28 in file Assembler_Startup.s
   Uses
      At line 29 in file Assembler_Startup.s
      At line 30 in file Assembler_Startup.s
      At line 31 in file Assembler_Startup.s

STR_1 00000100

Symbol: STR_1
   Definitions
      At line 29 in file Assembler_Startup.s
   Uses
      At line 47 in file Assembler_Startup.s
Comment: STR_1 used once
STR_2 00000200

Symbol: STR_2
   Definitions
      At line 30 in file Assembler_Startup.s
   Uses
      At line 50 in file Assembler_Startup.s
Comment: STR_2 used once
Stack 00000300

Symbol: Stack
   Definitions
      At line 31 in file Assembler_Startup.s
   Uses
      At line 32 in file Assembler_Startup.s
Comment: Stack used once
TopStack 00000400

Symbol: TopStack
   Definitions
      At line 32 in file Assembler_Startup.s
   Uses
      At line 46 in file Assembler_Startup.s
Comment: TopStack used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AtouI 00000020

Symbol: AtouI
   Definitions
      At line 68 in file Assembler_Startup.s
   Uses
      At line 48 in file Assembler_Startup.s
Comment: AtouI used once
Berechnung 00000068

Symbol: Berechnung
   Definitions
      At line 104 in file Assembler_Startup.s
   Uses
      At line 49 in file Assembler_Startup.s
Comment: Berechnung used once
Programm 00000000

Symbol: Programm
   Definitions
      At line 37 in file Assembler_Startup.s
   Uses
      None
Comment: Programm unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 39 in file Assembler_Startup.s
   Uses
      None
Comment: Reset_Handler unused
convert_loop_AtouI 0000002C

Symbol: convert_loop_AtouI
   Definitions
      At line 73 in file Assembler_Startup.s
   Uses
      At line 85 in file Assembler_Startup.s
Comment: convert_loop_AtouI used once
convert_loop_uItoA 000000B0

Symbol: convert_loop_uItoA
   Definitions
      At line 138 in file Assembler_Startup.s
   Uses
      At line 149 in file Assembler_Startup.s
Comment: convert_loop_uItoA used once
done_AtouI 00000050

Symbol: done_AtouI
   Definitions
      At line 87 in file Assembler_Startup.s
   Uses
      At line 75 in file Assembler_Startup.s
Comment: done_AtouI used once
done_uItoA 00000100

Symbol: done_uItoA



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 163 in file Assembler_Startup.s
   Uses
      At line 156 in file Assembler_Startup.s
Comment: done_uItoA used once
endlos 0000001C

Symbol: endlos
   Definitions
      At line 56 in file Assembler_Startup.s
   Uses
      At line 56 in file Assembler_Startup.s
Comment: endlos used once
error 0000005C

Symbol: error
   Definitions
      At line 92 in file Assembler_Startup.s
   Uses
      At line 79 in file Assembler_Startup.s
Comment: error used once
main 00000004

Symbol: main
   Definitions
      At line 45 in file Assembler_Startup.s
   Uses
      None
Comment: main unused
reverse_loop 000000E4

Symbol: reverse_loop
   Definitions
      At line 154 in file Assembler_Startup.s
   Uses
      At line 161 in file Assembler_Startup.s
Comment: reverse_loop used once
uItoA 0000009C

Symbol: uItoA
   Definitions
      At line 131 in file Assembler_Startup.s
   Uses
      At line 51 in file Assembler_Startup.s
Comment: uItoA used once
13 symbols
352 symbols in table
